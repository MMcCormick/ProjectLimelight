require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TalksController do
  render_views

  before(:each) do
    @user = Factory(:user)
    @attr = {
      :content => 'Test content for talk.'
    }
  end

  describe "GET show" do
    it "assigns the requested talk as @talk" do
      talk = @user.talks.create!(@attr)
      get :show, :id => talk.id.to_s
      assigns(:talk).should eq(talk)
    end
  end

  describe "GET new" do
    before(:each) do
      sign_in @user
    end

    it "assigns a new talk as @talk" do
      get :new
      assigns(:talk).should be_a_new(Talk)
    end
  end

  describe "GET edit" do
    before(:each) do
      sign_in @user
    end

    it "assigns the requested talk as @talk" do
      talk = @user.talks.create!(@attr)
      get :edit, :id => talk.id.to_s
      assigns(:talk).should eq(talk)
    end
  end

  describe "POST create" do
    before(:each) do
      sign_in @user
    end

    describe "with valid params" do
      it "creates a new Talk" do
        lambda do
          post :create, :talk => @attr
        end.should change(Talk, :count).by(1)
      end

      it "assigns a newly created talk as @talk" do
        post :create, :talk => @attr
        assigns(:talk).should be_a(Talk)
        assigns(:talk).should be_persisted
      end

      it "redirects to the created talk" do
        post :create, :talk => @attr
        response.should redirect_to(Talk.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved talk as @talk" do
        # Trigger the behavior that occurs when invalid params are submitted
        Talk.any_instance.stub(:save).and_return(false)
        post :create, :talk => {}
        assigns(:talk).should be_a_new(Talk)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Talk.any_instance.stub(:save).and_return(false)
        post :create, :talk => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    before(:each) do
      sign_in @user
    end

    describe "with valid params" do
      it "updates the requested talk" do
        talk = @user.talks.create!(@attr)
        # Assuming there are no other talk in the database, this
        # specifies that the Talk created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Talk.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => talk.id, :talk => {'these' => 'params'}
      end

      it "assigns the requested talk as @talk" do
        talk = @user.talks.create!(@attr)
        put :update, :id => talk.id, :talk => @attr
        assigns(:talk).should eq(talk)
      end

      it "redirects to the talk" do
        talk = @user.talks.create!(@attr)
        put :update, :id => talk.id, :talk => @attr
        response.should redirect_to(talk)
      end
    end

    describe "with invalid params" do
      it "assigns the talk as @talk" do
        talk = @user.talks.create!(@attr)
        # Trigger the behavior that occurs when invalid params are submitted
        Talk.any_instance.stub(:save).and_return(false)
        put :update, :id => talk.id.to_s, :talk => {}
        assigns(:talk).should eq(talk)
      end

      it "re-renders the 'edit' template" do
        talk = @user.talks.create!(@attr)
        # Trigger the behavior that occurs when invalid params are submitted
        Talk.any_instance.stub(:save).and_return(false)
        put :update, :id => talk.id.to_s, :talk => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      sign_in @user
    end

    it "destroys the requested talk" do
      talk = @user.talks.create!(@attr)
      expect {
        delete :destroy, :id => talk.id.to_s
      }.to change(Talk, :count).by(-1)
    end

    it "redirects to the deleted talk" do
      talk = @user.talks.create!(@attr)
      delete :destroy, :id => talk.id.to_s
      response.should redirect_to(talk)
    end
  end

end
